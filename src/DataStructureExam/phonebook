
컬렉션 프레임워크에 참여하는 두줄기 중 컬렉션(Collection)의 가장 중요한 인터페이스는
Collection, Set, SortedSet, List로 모두 대표됩니다.
나머지는 이런 인터페이스를 구현한 개별 클래스이므로 클래스이름만 알고, 클래스가
어떤 클래스를 구현것인지말 알면, 객체를 생성할 수 있고 , 객체에 적절한 인터페이스형
레퍼런스를 결합하면 폴리모피즘 덕분으로 컬렉션을 마음껏 사용할 수 있습니다.

컬렉션의 선택
컬레션 객체들은 태어날 때부터(설계될 때부터) 다중 thread 환경을 대비한 설계라던가, 
혹은 성능 최우선 등의 설계기준에 따라 각각의 장단점이 존재하므로 컬렉션을 생성하는 
부분에서 컬렉션으로서는 같은 기능을 갖고 있지만 ,어떤 객체를 생성할 것인지는 프로그램
의 성격 및 환경을 고려해야 합니다.
예를 들면, 대표적인 Set은 HastSet 과 TreeSet이 있습니다.
Set s = new HashSet();   or          Set s = new TreeSet();
일반적으로 어떤 것을 많이 쓰나구요? 당근 HashSet입니다. TreeSet에 비해서 엄청 
빠릅니다. 하지만 꼭 객체의 순서를 반드시 유지하거나 중요한 거라면 TreeSet을
사용해야 합니다. HashSet은 Set이고 TreeSet은 SortedSet이기 때문입니다.
그러니까 TreeSet은 Collection이기고 하고, Set이기기도 하고, SortedSet이기고 한거지요.
당연히 TreeSet은 객체를 추가하거나 제거할 때 시간이 많이 걸릴 수 밖에 없겠지요.
저장하는 객체가 중복만 되지 않는 조건이라면 여러분은 아마 HashSet을 사용하실 겁니다. 
또 한가지의 예를 더 들면, 대표적인 List는 Vector와 ArrayList , LinkedList등이 있습니다.
          List list = new Vector();
          List list = new ArrayList();
          List list = new LinkedList();
일반적으로 어떤 것을 많이 쓰냐구요? 당근 ArrayList입니다. 제일 빠릅니다.
Vector의 경우는 메소드에 synchronized 라는 키워드가 붙어 있어서 메소드 호출때마다 
오버헤드가 있습니다만 ArrayList는 그런 것이 없습니다.
LinkedList의 경우는 여러분이 중간중간에 있는 객체를 삭제하는 경우가 많다면 좋습니다. 
데이터형의 존재이유와 같이 데이터의 양이 상당히 많아지더라도 상수(Constant)시간으로 
객체를 List에서 삭제할 수 있습니다. 하지만 ArrayList의 경우는 일반적으로 갖고 잇는 객체
의 크기에 비례합니다. 즉, 객체가 1000개 때보다 10000개때가 훨씬 많이 느립니다.
반대로 객체를 꺼내서 참조 해야하는 경우가 많다면 ArrayList가 훨씬 좋습니다. 
상수(Constant)시간으로 참조할 수 있습니다. 반면에 LinkedList는 개수에 비례하겠지요. 
그것도 아주 않좋게 비례합니다.
여러분은 아마 대부분의 경우 ArrayList를 사용하지 않을까 생각합니다.
 
컬렉션의 특징
컬렉션(Collection)들은 배열과 달리 생성할 때 객체를 보관하기 위한 공간을 미리 정하지 
않아도 됩니다. 배열은 선언과 동시에 100개 혹은 2000개 등의 개수를 적어주어야
하지만 컬렉션들은 그럴 필요가 없다는 것이지요. 이것이 참 매력입니다.
프로그램 하다보면 저장되어야 할 객체의 수가 동적으로 변하는데 이것을 프로그램을 
만들때, 즉 컴파일시에 예상해서 프로그램하는 것이 상당히 어렵습니다.
 쓸데없이 많은 객체를 예상하게되면 메모리를 낭비하게 되고, 적게 예상하면 프로그램 
새로 해야합니다. 컬렉션은 적어도 그런 걱정은 없습니다. 
 처음에 컬렉션의 크기를 정하지 않아도 된다는 뜻입니다. 
하지만 한가지 알려드리고 싶은 것은 모든 컬렉션은 처음에 만들어질 때 초기화된 크기,
용량을 갖고 있습니다. 객체가 계속 추가되어서 어느정도 수준이 되면 보통 자신의 현재 
용량을 2배로 늘리는데, 이게 엄청나게 힘든거라 엄청 스트레스를 받습니다. 
시간이 많이 걸립니다. 용량을 두배로 늘렸는데도 계속 객체가 추가가 되어 어느 정도를 
또 넘으면 다시 용량을 2배로 늘립니다. 마찮가지 엄청 스트레스입니다. 
이렇게 스트레스를 많이 받게 되는데 이것을 피하고자 한다면 , 프로그래머가 추가되는 
객체의 정확한 수는 모르지만 어느정도 예측이 가능하다면 처음 컬렉션을 생성할 때 그 
예상의 정도보다 조금 크게 초기 용량을 지정하는 것이 컴퓨터에게 스트레스를 덜 받게 
하는 길입니다. 속도가 좋아진다는 뜻입니다.
약 200개 정도 객체가 추가 될 것 같다면 다음과 같이 하면 됩니다.
             List list = new ArrayList(250);                          
아마 성능에 도움이 될것입니다.
